<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PPS home</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #0a0a0a;
            color: #fff;
            overflow-x: hidden;
            min-height: 100vh;
        }

        #canvas-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
            background: #0a0a0a;
        }

        .container {
            position: relative;
            z-index: 1;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .glass-panel {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
        }

        h1 {
            font-size: 3em;
            color: #4CAF50;
            margin-bottom: 10px;
            text-shadow: 0 0 10px rgba(76, 175, 80, 0.5);
        }

        .subtitle {
            color: #aaa;
            font-size: 1.2em;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .tab {
            padding: 12px 24px;
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: #fff;
        }

        .tab:hover {
            background: rgba(76, 175, 80, 0.2);
            transform: translateY(-2px);
        }

        .tab.active {
            background: rgba(76, 175, 80, 0.3);
            border-color: #4CAF50;
            box-shadow: 0 0 15px rgba(76, 175, 80, 0.3);
        }

        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }

        input[type="text"], select {
            flex: 1;
            padding: 15px;
            border-radius: 8px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(255, 255, 255, 0.05);
            color: #fff;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        input[type="text"]:focus, select:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
        }

        select {
            cursor: pointer;
        }

        select option {
            background: #1a1a1a;
            color: #fff;
        }

        button {
            padding: 15px 30px;
            background: #4CAF50;
            border: none;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 16px;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        button:hover {
            background: #45a049;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
        }

        .status-panel {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .status-item {
            background: rgba(255, 255, 255, 0.05);
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .status-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .status-value {
            font-size: 1.5em;
            color: #4CAF50;
            margin-bottom: 5px;
            text-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
        }

        .status-label {
            color: #aaa;
            font-size: 0.9em;
        }

        .proxy-method-group {
            margin-bottom: 20px;
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .proxy-method-group.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .advanced-options {
            margin-top: 15px;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            border: 1px solid rgba(76, 175, 80, 0.2);
        }

        .checkbox-group {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            margin-bottom: 15px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .checkbox-item:hover {
            color: #4CAF50;
        }

        .checkbox-item input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
        }

        .history {
            margin-top: 30px;
        }

        .history-item {
            padding: 15px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            margin-bottom: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .history-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }

        .loading-spinner {
            display: none;
            width: 20px;
            height: 20px;
            border: 3px solid #4CAF50;
            border-top: 3px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .method-description {
            font-size: 0.9em;
            color: #aaa;
            margin-top: 10px;
            padding: 10px;
            border-left: 3px solid #4CAF50;
            background: rgba(76, 175, 80, 0.1);
            border-radius: 0 8px 8px 0;
        }

        .proxy-url {
            word-break: break-all;
            padding: 10px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            margin-top: 10px;
            font-family: monospace;
            color: #4CAF50;
        }

        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip:hover::after {
            content: attr(data-tooltip);
            position: absolute;
            bottom: 100%;
            left: 50%;
            transform: translateX(-50%);
            padding: 8px;
            background: rgba(0, 0, 0, 0.8);
            border-radius: 4px;
            font-size: 14px;
            white-space: nowrap;
            z-index: 10;
        }

        /* Games Tab CSS */
        .games-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
            padding: 20px 0;
        }

        .game-card {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(76, 175, 80, 0.3);
            position: relative;
            overflow: hidden;
        }

        .game-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.2);
            background: rgba(255, 255, 255, 0.15);
        }

        .game-card img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .game-card h3 {
            color: #fff;
            margin: 0;
            font-size: 1.2em;
        }

        .game-search {
            margin-bottom: 20px;
            width: 100%;
        }

        .game-categories {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .game-category {
            padding: 8px 15px;
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .game-category:hover, .game-category.active {
            background: rgba(76, 175, 80, 0.3);
        }

        .game-frame {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.9);
            display: none;
        }

        .game-frame.active {
            display: block;
        }

        .game-frame iframe {
            width: 100%;
            height: 100%;
            border: none;
        }

        .close-game {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #4CAF50;
            border: none;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            z-index: 1001;
        }

        /* Game mode window */
        .game-mode {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #0a0a0a;
            z-index: 1000;
            display: none;
            flex-direction: column;
        }

        .game-mode.active {
            display: flex;
        }

        .game-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: rgba(255, 255, 255, 0.05);
        }

        .game-title {
            font-size: 1.5em;
            color: #4CAF50;
        }

        .game-container {
            flex: 1;
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .game-app {
            width: 100%;
            height: 100%;
            border: none;
        }

        .close-button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Game loading spinner */
        .game-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }

        .game-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(76, 175, 80, 0.3);
            border-top: 5px solid #4CAF50;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        /* Pagination */
        .games-pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }

        .page-button {
            padding: 8px 15px;
            background: rgba(76, 175, 80, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.3);
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .page-button:hover, .page-button.active {
            background: rgba(76, 175, 80, 0.3);
        }

        /* Featured game banner */
        .featured-game {
            margin-bottom: 30px;
            border-radius: 15px;
            overflow: hidden;
            position: relative;
            height: 250px;
        }

        .featured-game img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .featured-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 20px;
            background: linear-gradient(transparent, rgba(0,0,0,0.8));
            color: white;
        }

        .featured-overlay h2 {
            font-size: 2em;
            margin-bottom: 10px;
            color: #4CAF50;
        }

        .play-featured {
            display: inline-block;
            padding: 10px 20px;
            background: #4CAF50;
            color: white;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .play-featured:hover {
            background: #45a049;
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <canvas id="canvas-background"></canvas>
    <div class="container">
        <div class="header">
            <div style="color: #FFD700; font-family: Arial, sans-serif; font-size: 36px; font-weight: bold; text-shadow: 2px 2px 4px rgba(0,0,0,0.5); margin-bottom: 20px;">
                broccoli unblocker
            </div>

            <!-- Broccoli Tree SVG -->
            <div style="width: 100px; height: 100px; margin: 0 auto;">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 250">
                    <!-- Tree trunk -->
                    <rect x="90" y="150" width="20" height="80" fill="#e3cc8f"/>
                    
                    <!-- Tree crown -->
                    <ellipse cx="100" cy="100" rx="70" ry="80" fill="#2D6A34"/>
                    <ellipse cx="70" cy="120" rx="30" ry="35" fill="#2D6A34"/>
                    <ellipse cx="130" cy="120" rx="30" ry="35" fill="#2D6A34"/>
                    <ellipse cx="70" cy="80" rx="25" ry="30" fill="#2D6A34"/>
                    <ellipse cx="130" cy="80" rx="25" ry="30" fill="#2D6A34"/>
                </svg>
            </div>
        </div>

        <div class="glass-panel">
            <div class="tabs">
                <div class="tab active" data-tab="web">Web Proxy</div>
                <div class="tab" data-tab="archive">Archive</div>
                <div class="tab" data-tab="translate">Translate</div>
                <div class="tab" data-tab="cloaking">Cloaking</div>
                <div class="tab" data-tab="specialized">Specialized</div>
                <div class="tab" data-tab="games">Games</div>
                <div class="tab" data-tab="tools">Tools</div>
            </div>

            <div class="proxy-method-group active" id="web-proxies">
                <select id="web-proxy-select">
                    <option value="proxysite">ProxySite - Fast & Reliable</option>
                    <option value="croxyproxy">CroxyProxy - Secure SSL</option>
                    <option value="hidester">Hidester - Anonymous Browsing</option>
                    <option value="filterbypass">FilterBypass - School Bypass</option>
                    <option value="hide.me">Hide.me - Premium Proxy</option>
                    <option value="kproxy">KProxy - Multi-Server</option>
                    <option value="vpnbook">VPNBook - Free VPN Proxy</option>
                    <option value="4everproxy">4everProxy - Global Network</option>
                    <option value="proxfree">ProxFree - Fast Access</option>
                    <option value="hidemyass">HideMyAss - Professional</option>
                </select>
                <div class="method-description">
                    Standard web proxy service with SSL encryption and cookie management.
                </div>
            </div>

            <div class="proxy-method-group" id="archive-proxies">
                <select id="archive-proxy-select">
                    <option value="wayback">Wayback Machine - Internet Archive</option>
                    <option value="archive.today">Archive.today - Permanent Snapshots</option>
                    <option value="archive.is">Archive.is - Page Preservation</option>
                    <option value="google-cache">Google Cache - Recent Snapshot</option>
                    <option value="bing-cache">Bing Cache - Microsoft Archive</option>
                    <option value="gigablast">Gigablast - Historical View</option>
                    <option value="webcite">WebCite - Academic Archive</option>
                    <option value="archive.md">Archive.md - Quick Cache</option>
                </select>
                <div class="method-description">
                    Access cached versions of websites from various archive services.
                </div>
            </div>

            <div class="proxy-method-group" id="translate-proxies">
                <select id="translate-proxy-select">
                    <option value="google">Google Translate Proxy</option>
                    <option value="bing">Bing Translator Proxy</option>
                    <option value="yandex">Yandex Translate Proxy</option>
                    <option value="deepl">DeepL Proxy</option>
                    <option value="baidu">Baidu Translate Proxy</option>
                </select>
                <select id="translate-language">
                    <option value="en">English</option>
                    <option value="es">Spanish</option>
                    <option value="fr">French</option>
                    <option value="de">German</option>
                    <option value="ru">Russian</option>
                    <option value="zh">Chinese</option>
                    <option value="ja">Japanese</option>
                    <option value="ko">Korean</option>
                    <option value="ar">Arabic</option>
                </select>
                <div class="method-description">
                    Access websites through translation services for additional anonymity.
                </div>
            </div>

            <div class="proxy-method-group" id="cloaking-methods">
                <select id="cloak-method-select">
                    <option value="about:blank">about:blank Cloak - Stealth Mode</option>
                    <option value="blob">Blob URL Cloak - Memory Based</option>
                    <option value="data">Data URL Cloak - Encoded Access</option>
                    <option value="window-open">Window.open Cloak - New Window</option>
                    <option value="history">History API Cloak - Navigation Mask</option>
                    <option value="service-worker">ServiceWorker Cloak - Advanced</option>
                    <option value="double-about">Double about:blank - Ultra Stealth</option>
                    <option value="iframe">iFrame Cloak - Embedded Mode</option>
                </select>
                <div class="method-description">
                    Advanced cloaking methods to hide your browsing activity.
                </div>
            </div>

            <div class="proxy-method-group" id="specialized-proxies">
                <select id="specialized-proxy-select">
                    <option value="pdf">PDF Viewer Proxy</option>
                    <option value="text">Text Only Proxy</option>
                    <option value="mobile">Mobile View Proxy</option>
                    <option value="tor">Tor Gateway Proxy</option>
                    <option value="paywall">Paywall Bypass Proxy</option>
                    <option value="youtube">YouTube Proxy (Invidious)</option>
                    <option value="reddit">Reddit Proxy (Teddit)</option>
                    <option value="twitter">Twitter Proxy (Nitter)</option>
                </select>
                <div class="method-description">
                    Specialized proxy services for specific types of content.
                </div>
            </div>

            <!-- Games section -->
            <div class="proxy-method-group" id="games-proxies">
                <div class="game-search">
                    <input type="text" id="game-search-input" placeholder="Search for games...">
                </div>
                
                <div class="game-categories">
                    <div class="game-category active" data-category="all">All Games</div>
                    <div class="game-category" data-category="action">Action</div>
                    <div class="game-category" data-category="arcade">Arcade</div>
                    <div class="game-category" data-category="io">IO Games</div>
                    <div class="game-category" data-category="puzzle">Puzzle</div>
                </div>
                
                <div class="featured-game">
                    <img src="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 800 400'><rect fill='%234CAF50' width='800' height='400'/></svg>" alt="Featured Game">
                    <div class="featured-overlay">
                        <h2>Slope</h2>
                        <p>Race down a randomized slope. Test your reflexes in this fast-paced 3D game!</p>
                        <div class="play-featured" data-game="slope">Play Now</div>
                    </div>
                </div>
                
                <div class="games-grid" id="games-grid">
                    <!-- Game cards will be populated via JavaScript -->
                </div>
                
                <div class="games-pagination" id="games-pagination">
                    <!-- Pagination buttons will be populated via JavaScript -->
                </div>
                
                <div class="method-description">
                    Access CrazyGames titles through our secure SOCKS4 proxy (198.24.170.146:30008).
                </div>
            </div>

            <div class="input-group">
                <input type="text" id="url-input" placeholder="Enter URL to unblock... (e.g., https://example.com)">
                <button id="unblock-btn">Unblock</button>
                <div class="loading-spinner"></div>
            </div>

            <div class="advanced-options">
                <div class="checkbox-group">
                    <div class="checkbox-item tooltip" data-tooltip="Prevents cookie tracking">
                        <input type="checkbox" id="remove-cookies" checked>
                        <label for="remove-cookies">Remove Cookies</label>
                    </div>
                    <div class="checkbox-item tooltip" data-tooltip="Disables JavaScript for safety">
                        <input type="checkbox" id="remove-scripts" checked>
                        <label for="remove-scripts">Remove Scripts</label>
                    </div>
                    <div class="checkbox-item tooltip" data-tooltip="Encrypts the URL request">
                        <input type="checkbox" id="encrypt-url" checked>
                        <label for="encrypt-url">Encrypt URL</label>
                    </div>
                    <div class="checkbox-item tooltip" data-tooltip="Hides your origin">
                        <input type="checkbox" id="hide-referrer" checked>
                        <label for="hide-referrer">Hide Referrer</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="glass-panel">
            <div class="status-panel">
                <div class="status-item">
                    <div class="status-value" id="active-connections">0</div>
                    <div class="status-label">Active Connections</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="server-load">0%</div>
                    <div class="status-label">Server Load</div>
                </div>
                <div class="status-item">
                    <div class="status-value" id="response-time">0ms</div>
                    <div class="status-label">Response Time</div>
                </div>
            </div>
        </div>

        <div class="glass-panel history">
            <h2>Recent Activity</h2>
            <div id="history-list"></div>
        </div>
    </div>

    <!-- Game frame for playing games -->
    <div class="game-frame" id="game-frame">
        <button class="close-game" id="close-game">Close Game</button>
        <iframe id="game-iframe" src=""></iframe>
    </div>

    <!-- Game mode window -->
    <div class="game-mode" id="game-mode">
        <div class="game-header">
            <div class="game-title" id="game-title">Game Title</div>
            <button class="close-button" id="close-game">Close Game</button>
        </div>
        <div class="game-container">
            <div class="game-loading" id="game-loading">
                <div class="game-spinner"></div>
                <div>Loading game through secure proxy...</div>
            </div>
            <div id="game-render-area" class="game-app"></div>
        </div>
    </div>

<script>
    // Network Background Animation
    const canvas = document.getElementById('canvas-background');
    const ctx = canvas.getContext('2d');

    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    class Node {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.vx = (Math.random() - 0.5) * 2;
            this.vy = (Math.random() - 0.5) * 2;
            this.radius = Math.random() * 2 + 1;
        }

        update() {
            this.x += this.vx;
            this.y += this.vy;
            if (this.x < 0 || this.x > canvas.width) this.vx *= -1;
            if (this.y < 0 || this.y > canvas.height) this.vy *= -1;
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fillStyle = '#4CAF50';
            ctx.fill();
        }
    }

    const nodes = Array.from({ length: 50 }, () => new Node());

    function animate() {
        ctx.fillStyle = 'rgba(10, 10, 10, 0.1)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        nodes.forEach(node => {
            node.update();
            node.draw();

            nodes.forEach(otherNode => {
                const dx = node.x - otherNode.x;
                const dy = node.y - otherNode.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < 150) {
                    ctx.beginPath();
                    ctx.moveTo(node.x, node.y);
                    ctx.lineTo(otherNode.x, otherNode.y);
                    ctx.strokeStyle = 'rgba(76, 175, 80, ' + (1 - distance / 150) + ')';
                    ctx.stroke();
                }
            });
        });

        requestAnimationFrame(animate);
    }
    animate();

    // Proxy Services Configuration
    const proxyServices = {
        // Web Proxies
        proxysite: 'https://www.proxysite.com/process.php?d=',
        croxyproxy: 'https://www.croxyproxy.com/process.php?d=',
        hidester: 'https://hidester.com/proxy/',
        filterbypass: 'https://www.filterbypass.me/?url=',
        'hide.me': 'https://hide.me/en/proxy?u=',
        kproxy: 'https://kproxy.com/proxy?q=',
        vpnbook: 'https://www.vpnbook.com/webproxy?url=',
        '4everproxy': 'https://4everproxy.com/proxy?u=',
        proxfree: 'https://www.proxfree.com/proxy?url=',
        hidemyass: 'https://www.hidemyass-freeproxy.com/proxy/en-us/',
        'socks-custom': 'socks4://198.24.170.146:30008/',

        // Archive Services
        wayback: 'https://web.archive.org/web/',
        'archive.today': 'https://archive.today/?run=1&url=',
        'archive.is': 'https://archive.is/submit/?url=',
        'google-cache': 'https://webcache.googleusercontent.com/search?q=cache:',
                'bing-cache': 'https://cc.bingj.com/cache.aspx?q=',
        gigablast: 'https://www.gigablast.com/search?q=',
        webcite: 'https://www.webcitation.org/archive?url=',
        'archive.md': 'https://archive.md/submit/?url=',

        // Translation Proxies
        google: 'https://translate.google.com/translate?sl=auto&tl=',
        bing: 'https://www.microsofttranslator.com/bv.aspx?from=&to=',
        yandex: 'https://translate.yandex.com/translate?lang=',
        deepl: 'https://www.deepl.com/translator#auto/',
        baidu: 'https://fanyi.baidu.com/#auto/',

        // Specialized
        pdf: 'https://docs.google.com/viewer?url=',
        text: 'https://www.textise.net/showText.aspx?strURL=',
        mobile: 'https://www.google.com/gwt/x?u=',
        tor: 'https://onion.pet/open?url=',
        paywall: 'https://12ft.io/proxy?q=',
        youtube: 'https://invidious.snopyta.org/watch?v=',
        reddit: 'https://teddit.net/',
        twitter: 'https://nitter.net/'
    };

    // Game URLs
    const gameURLs = {
        minecraft: 'https://classic.minecraft.net',
        snake: 'https://playsnake.org',
        tetris: 'https://tetris.com/play-tetris',
        '2048': 'https://play2048.co'
    };

    // CrazyGames Data - Top 10 games
    const crazyGamesData = [
        { id: 'slope', name: 'Slope', category: 'arcade', img: 'slope.jpg' },
        { id: 'tunnel-rush', name: 'Tunnel Rush', category: 'arcade', img: 'tunnel-rush.jpg' },
        { id: 'subway-surfers', name: 'Subway Surfers', category: 'arcade', img: 'subway-surfers.jpg' },
        { id: 'vex-5', name: 'Vex 5', category: 'puzzle', img: 'vex-5.jpg' },
        { id: 'cookie-clicker', name: 'Cookie Clicker', category: 'puzzle', img: 'cookie-clicker.jpg' },
        { id: 'moto-x3m', name: 'Moto X3M', category: 'action', img: 'moto-x3m.jpg' },
        { id: 'smash-karts', name: 'Smash Karts', category: 'io', img: 'smash-karts.jpg' },
        { id: 'retro-bowl', name: 'Retro Bowl', category: 'action', img: 'retro-bowl.jpg' },
        { id: 'drift-hunters', name: 'Drift Hunters', category: 'action', img: 'drift-hunters.jpg' },
        { id: 'run-3', name: 'Run 3', category: 'arcade', img: 'run-3.jpg' }
    ];

    // Tab Switching Functionality
    const tabs = document.querySelectorAll('.tab');
    const proxyGroups = document.querySelectorAll('.proxy-method-group');

    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            // Remove active class from all tabs and groups
            tabs.forEach(t => t.classList.remove('active'));
            proxyGroups.forEach(group => group.classList.remove('active'));

            // Add active class to clicked tab
            tab.classList.add('active');

            // Show corresponding proxy group
            const tabId = tab.getAttribute('data-tab');
            const group = document.getElementById(`${tabId}-proxies`) || 
                         document.getElementById(`${tabId}-methods`);
            if (group) {
                group.classList.add('active');
            }
            
            // Hide input group if games tab is active
            const inputGroup = document.querySelector('.input-group');
            const advancedOptions = document.querySelector('.advanced-options');
            if (tabId === 'games') {
                if (inputGroup) inputGroup.style.display = 'none';
                if (advancedOptions) advancedOptions.style.display = 'none';
                
                // Initialize games grid if not already initialized
                if (document.getElementById('games-grid') && !document.getElementById('games-grid').hasChildNodes()) {
                    initGamesGrid();
                }
            } else {
                if (inputGroup) inputGroup.style.display = 'flex';
                if (advancedOptions) advancedOptions.style.display = 'block';
            }
        });
    });

    // Unblock Button Functionality
    const unblockBtn = document.getElementById('unblock-btn');
    const urlInput = document.getElementById('url-input');
    const loadingSpinner = document.querySelector('.loading-spinner');

    unblockBtn.addEventListener('click', () => {
        let url = urlInput.value.trim();
        if (!url) {
            alert('Please enter a URL');
            return;
        }

        // Add https:// if no protocol specified
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
            url = 'https://' + url;
        }

        // Show loading spinner
        loadingSpinner.style.display = 'inline-block';

        // Get active tab and proxy method
        const activeTab = document.querySelector('.tab.active').getAttribute('data-tab');
        let finalUrl = '';

        switch (activeTab) {
            case 'web':
                const webProxy = document.getElementById('web-proxy-select').value;
                
                if (webProxy === 'socks-custom') {
                    // Use our custom SOCKS4 proxy (198.24.170.146:30008)
                    finalUrl = createProxyUrl(url, {
                        type: 'socks4',
                        host: '198.24.170.146',
                        port: '30008'
                    });
                } else {
                    finalUrl = proxyServices[webProxy] + encodeURIComponent(url);
                }
                break;

            case 'archive':
                const archiveProxy = document.getElementById('archive-proxy-select').value;
                finalUrl = proxyServices[archiveProxy] + encodeURIComponent(url);
                break;

            case 'translate':
                const translateProxy = document.getElementById('translate-proxy-select').value;
                const language = document.getElementById('translate-language').value;
                finalUrl = proxyServices[translateProxy] + language + '&u=' + encodeURIComponent(url);
                break;

            case 'cloaking':
                const cloakMethod = document.getElementById('cloak-method-select').value;
                // Hide loading spinner first
                loadingSpinner.style.display = 'none';
                
                switch (cloakMethod) {
                    case 'about:blank':
                        createAboutBlankCloak(url);
                        return;
                    case 'blob':
                        createBlobCloak(url);
                        return;
                    case 'data':
                        createDataUrlCloak(url);
                        return;
                    case 'window-open':
                        createWindowOpenCloak(url);
                        return;
                    case 'iframe':
                        createIframeCloak(url);
                        return;
                    case 'double-about':
                        createDoubleAboutCloak(url);
                        return;
                    case 'history':
                        createHistoryCloak(url);
                        return;
                    case 'service-worker':
                        createServiceWorkerCloak(url);
                        return;
                }
                break;

            case 'specialized':
                const specializedProxy = document.getElementById('specialized-proxy-select').value;
                finalUrl = proxyServices[specializedProxy] + encodeURIComponent(url);
                break;
        }

        // Add to history
        addToHistory(url, activeTab);

        // Hide loading spinner
        loadingSpinner.style.display = 'none';

        // Open the proxied URL
        if (finalUrl) {
            window.open(finalUrl, '_blank');
        }
    });

    // Function to create proxy URL using the SOCKS4 proxy
    function createProxyUrl(url, proxyConfig) {
        // In a real implementation, this would create a server-side request through the proxy
        // For demonstration purposes, we'll use a hypothetical proxy handler endpoint
        return `/proxy-handler?url=${encodeURIComponent(url)}&type=${proxyConfig.type}&host=${proxyConfig.host}&port=${proxyConfig.port}`;
    }

    // Cloaking Methods
    function createAboutBlankCloak(url) {
        try {
            const win = window.open('about:blank', '_blank');
            if (!win) {
                alert('Pop-up blocked. Please allow pop-ups for this site.');
                return;
            }
            
            win.document.open();
            win.document.write('<!DOCTYPE html><html><head><title>About:blank</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;}iframe{width:100%;height:100%;border:none;}</style></head><body><iframe src="' + url + '" allowfullscreen></iframe></body></html>');
            win.document.close();
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createBlobCloak(url) {
        try {
            const html = '<!DOCTYPE html><html><head><title>Loading...</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;}iframe{width:100%;height:100%;border:none;}</style></head><body><iframe src="' + url + '" allowfullscreen></iframe></body></html>';
            const blob = new Blob([html], { type: 'text/html' });
            const blobUrl = URL.createObjectURL(blob);
            window.open(blobUrl, '_blank');
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createDataUrlCloak(url) {
        try {
            const html = '<!DOCTYPE html><html><head><title>Loading...</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;}iframe{width:100%;height:100%;border:none;}</style></head><body><iframe src="' + url + '" allowfullscreen></iframe></body></html>';
            const dataUrl = 'data:text/html;base64,' + btoa(html);
            window.open(dataUrl, '_blank');
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createWindowOpenCloak(url) {
        try {
            const win = window.open('', '_blank', 'fullscreen=yes,toolbar=no,status=no,menubar=no,scrollbars=yes,resizable=yes');
            if (!win) {
                alert('Pop-up blocked. Please allow pop-ups for this site.');
                return;
            }
            win.location.href = url;
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createIframeCloak(url) {
        try {
            // Create a full-screen overlay iframe
            const overlay = document.createElement('div');
            overlay.style.position = 'fixed';
            overlay.style.top = '0';
            overlay.style.left = '0';
            overlay.style.width = '100%';
            overlay.style.height = '100%';
            overlay.style.backgroundColor = '#000';
            overlay.style.zIndex = '9999';
            
            // Add close button
            const closeBtn = document.createElement('button');
            closeBtn.innerText = 'Close';
            closeBtn.style.position = 'fixed';
            closeBtn.style.top = '10px';
            closeBtn.style.right = '10px';
            closeBtn.style.zIndex = '10000';
            closeBtn.style.padding = '5px 10px';
            closeBtn.style.backgroundColor = '#4CAF50';
            closeBtn.style.color = 'white';
            closeBtn.style.border = 'none';
            closeBtn.style.borderRadius = '5px';
            closeBtn.style.cursor = 'pointer';
            
            closeBtn.addEventListener('click', () => {
                document.body.removeChild(overlay);
                document.body.removeChild(closeBtn);
                document.body.style.overflow = 'auto';
            });
            
            // Add iframe
            const iframe = document.createElement('iframe');
            iframe.src = url;
            iframe.style.width = '100%';
            iframe.style.height = '100%';
            iframe.style.border = 'none';
            overlay.appendChild(iframe);
            
            // Add to document
            document.body.appendChild(overlay);
            document.body.appendChild(closeBtn);
            document.body.style.overflow = 'hidden';
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createDoubleAboutCloak(url) {
        try {
            alert("Double About:Blank cloak will open in a new window.");
            const win = window.open('about:blank', '_blank');
            if (!win) {
                alert('Pop-up blocked. Please allow pop-ups for this site.');
                return;
            }
            
            const htmlContent = '<!DOCTYPE html><html><head><title>About:blank</title>';
            const cssContent = '<style>body,html{margin:0;padding:0;height:100%;overflow:hidden;}iframe{width:100%;height:100%;border:none;}</style>';
            const bodyContent = '</head><body><iframe src="' + url + '" allowfullscreen></iframe></body></html>';
            
            win.document.open();
            win.document.write(htmlContent + cssContent + bodyContent);
            win.document.close();
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createHistoryCloak(url) {
        try {
            // Create a new window
            const win = window.open('about:blank', '_blank');
            if (!win) {
                alert('Pop-up blocked. Please allow pop-ups for this site.');
                return;
            }
            
            // Wait for the window to load
            setTimeout(function() {
                win.document.open();
                win.document.write('<!DOCTYPE html><html><head><title>Loading...</title><style>body,html{margin:0;padding:0;height:100%;overflow:hidden;}iframe{width:100%;height:100%;border:none;}</style><script>history.pushState({}, "Google", "https://www.google.com");<\/script></head><body><iframe src="' + url + '" allowfullscreen></iframe></body></html>');
                win.document.close();
            }, 100);
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    function createServiceWorkerCloak(url) {
        try {
            alert('Service Worker cloaking requires HTTPS. Using about:blank instead.');
            createAboutBlankCloak(url);
        } catch (e) {
            alert('Error: ' + e.message);
        }
    }

    // Game Cards Functionality
    const gameCards = document.querySelectorAll('.game-card');
    const gameFrame = document.getElementById('game-frame');
    const gameIframe = document.getElementById('game-iframe');
    const closeGameBtn = document.getElementById('close-game');

    gameCards.forEach(card => {
        card.addEventListener('click', () => {
            const game = card.getAttribute('data-game');
            if (gameURLs[game]) {
                gameIframe.src = gameURLs[game];
                gameFrame.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        });
    });

    closeGameBtn.addEventListener('click', () => {
        gameFrame.classList.remove('active');
        document.body.style.overflow = 'auto';
        // Clear iframe src after a short delay
        setTimeout(() => {
            gameIframe.src = '';
        }, 300);
    });

    // Games Section Functionality
    let currentPage = 1;
    const gamesPerPage = 6;
    let filteredGames = [...crazyGamesData];
    
    // Initialize games grid
    function initGamesGrid() {
        renderGames();
        renderPagination();
        
        // Set up event listeners
        setupGameSearch();
        setupCategoryFilters();
        setupGameLauncher();
        
        // Setup featured game
        document.querySelector('.play-featured').addEventListener('click', function() {
            const gameId = this.getAttribute('data-game');
            launchGame(gameId, 'Slope');
        });
    }
    
    // Render games based on current filters and pagination
    function renderGames() {
        const gamesGrid = document.getElementById('games-grid');
        gamesGrid.innerHTML = '';
        
        const startIndex = (currentPage - 1) * gamesPerPage;
        const endIndex = startIndex + gamesPerPage;
        const currentGames = filteredGames.slice(startIndex, endIndex);
        
        currentGames.forEach(game => {
            const gameCard = document.createElement('div');
            gameCard.className = 'game-card';
            gameCard.setAttribute('data-game', game.id);
            gameCard.setAttribute('data-name', game.name);
            
            // Create SVG placeholder with game name as text
            const svg = `<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 150'><rect fill='%234CAF50' width='200' height='150'/><text x='50%' y='50%' font-family='Arial' font-size='16' fill='white' text-anchor='middle' dominant-baseline='middle'>${game.name}</text></svg>`;
            
            gameCard.innerHTML = `
                <img src="data:image/svg+xml,${encodeURIComponent(svg)}" alt="${game.name}">
                <h3>${game.name}</h3>
            `;
            
            gamesGrid.appendChild(gameCard);
        });
    }
    
    // Render pagination controls
    function renderPagination() {
        const pagination = document.getElementById('games-pagination');
        pagination.innerHTML = '';
        
        const totalPages = Math.ceil(filteredGames.length / gamesPerPage);
        
        // Previous button
        if (totalPages > 1) {
            const prevButton = document.createElement('div');
            prevButton.className = 'page-button';
            prevButton.textContent = '< Prev';
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    renderGames();
                    renderPagination();
                }
            });
            pagination.appendChild(prevButton);
        }
        
        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('div');
            pageButton.className = 'page-button';
            if (i === currentPage) {
                pageButton.classList.add('active');
            }
            pageButton.textContent = i;
            pageButton.addEventListener('click', () => {
                currentPage = i;
                renderGames();
                renderPagination();
            });
            pagination.appendChild(pageButton);
        }
        
        // Next button
        if (totalPages > 1) {
            const nextButton = document.createElement('div');
            nextButton.className = 'page-button';
            nextButton.textContent = 'Next >';
            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    renderGames();
                    renderPagination();
                }
            });
            pagination.appendChild(nextButton);
        }
    }
    
    // Set up game search functionality
    function setupGameSearch() {
        const searchInput = document.getElementById('game-search-input');
        searchInput.addEventListener('input', () => {
            const searchTerm = searchInput.value.toLowerCase();
            
            if (searchTerm.trim() === '') {
                // If search is empty, reset to current category filter
                const activeCategory = document.querySelector('.game-category.active').getAttribute('data-category');
                filterGamesByCategory(activeCategory);
            } else {
                // Filter games by search term
                filteredGames = crazyGamesData.filter(game => 
                    game.name.toLowerCase().includes(searchTerm)
                );
                
                currentPage = 1;
                renderGames();
                renderPagination();
            }
        });
    }
    
    // Set up category filters
    function setupCategoryFilters() {
        const categories = document.querySelectorAll('.game-category');
        
        categories.forEach(category => {
            category.addEventListener('click', () => {
                // Remove active class from all categories
                categories.forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked category
                category.classList.add('active');
                
                // Filter games by category
                const categoryName = category.getAttribute('data-category');
                filterGamesByCategory(categoryName);
            });
        });
    }
    
    // Filter games by category
    function filterGamesByCategory(category) {
        if (category === 'all') {
            filteredGames = [...crazyGamesData];
        } else {
            filteredGames = crazyGamesData.filter(game => game.category === category);
        }
        
        currentPage = 1;
        renderGames();
        renderPagination();
        
        // Clear search input
        document.getElementById('game-search-input').value = '';
    }
    
    // Set up game launcher functionality
    function setupGameLauncher() {
        const gamesGrid = document.getElementById('games-grid');
        const gameMode = document.getElementById('game-mode');
        const closeGameBtn = document.getElementById('close-game');
        
        // Add event listener to game grid (delegation)
        gamesGrid.addEventListener('click', event => {
            const gameCard = event.target.closest('.game-card');
            if (gameCard) {
                const gameId = gameCard.getAttribute('data-game');
                const gameName = gameCard.getAttribute('data-name');
                launchGame(gameId, gameName);
            }
        });
        
        // Close game button
        closeGameBtn.addEventListener('click', () => {
            gameMode.classList.remove('active');
            document.body.style.overflow = 'auto';
            
            // Clear game content
            const gameRenderArea = document.getElementById('game-render-area');
            gameRenderArea.innerHTML = '';
        });
    }
    
    // Launch game through secure proxy
    function launchGame(gameId, gameName) {
        const gameMode = document.getElementById('game-mode');
        const gameTitle = document.getElementById('game-title');
        const gameLoading = document.getElementById('game-loading');
        const gameRenderArea = document.getElementById('game-render-area');
        
        // Set game title
        gameTitle.textContent = gameName;
        
        // Show game mode
        gameMode.classList.add('active');
        document.body.style.overflow = 'hidden';
        
        // Show loading indicator
        gameLoading.style.display = 'block';
        
        // Clear previous game content
        gameRenderArea.innerHTML = '';
        
        // Construct the URL to the CrazyGames game through our proxy
        const crazyGamesUrl = `https://www.crazygames.com/game/${gameId}`;
        
        // Create a secure loader for the game using our SOCKS4 proxy
        fetchGameContentThroughProxy(crazyGamesUrl, gameId)
            .then(gameContent => {
                // Hide loading indicator
                gameLoading.style.display = 'none';
                
                // Render game content
                renderGameContent(gameContent, gameRenderArea);
                
                // Add to history
                addToHistory(crazyGamesUrl, 'games');
            })
            .catch(error => {
                console.error('Error loading game:', error);
                gameLoading.style.display = 'none';
                gameRenderArea.innerHTML = `
                    <div style="padding: 20px; text-align: center; color: white;">
                        <h2>Error Loading Game</h2>
                        <p>${error.message || 'Failed to load game content'}</p>
                        <button id="retry-game-load" class="close-button" style="margin-top: 20px;">Retry</button>
                    </div>
                `;
                
                // Add retry functionality
                document.getElementById('retry-game-load').addEventListener('click', () => {
                    launchGame(gameId, gameName);
                });
            });
    }
    
    // Fetch game content through proxy
    function fetchGameContentThroughProxy(gameUrl, gameId) {
        // In a real implementation, this would make a server-side request through the SOCKS4 proxy
        // For this demo, we'll simulate the response with a promise
        
        return new Promise((resolve, reject) => {
            // Simulate loading time
            setTimeout(() => {
                // Create game content with WebGL canvas
                const gameContent = {
                    html: `
                        <div class="game-player" style="width: 100%; height: 100%;">
                            <canvas id="game-canvas-${gameId}" width="800" height="600" style="width: 100%; height: 100%;"></canvas>
                        </div>
                    `,
                    initScript: `
                        function initGame_${gameId}() {
                            const canvas = document.getElementById('game-canvas-${gameId}');
                            const ctx = canvas.getContext('2d');
                            
                            // Game state
                            const gameState = {
                                running: true,
                                score: 0,
                                entities: []
                            };
                            
                            // Create some game entities based on game type
                            if ('${gameId}' === 'slope') {
                                // Slope game simulation
                                gameState.entities.push({
                                    type: 'player',
                                    x: canvas.width / 2,
                                    y: canvas.height / 2,
                                    radius: 15,
                                    color: '#4CAF50',
                                    vx: 0,
                                    vy: 0
                                });
                                
                                // Create obstacles
                                for (let i = 0; i < 20; i++) {
                                    gameState.entities.push({
                                        type: 'obstacle',
                                        x: Math.random() * canvas.width,
                                        y: Math.random() * canvas.height,
                                        width: 30 + Math.random() * 50,
                                        height: 10 + Math.random() * 20,
                                        color: '#FF5722'
                                    });
                                }
                            } else {
                                // Generic game simulation
                                gameState.entities.push({
                                    type: 'player',
                                    x: canvas.width / 2,
                                    y: canvas.height / 2,
                                    radius: 20,
                                    color: '#4CAF50'
                                });
                                
                                // Create some entities
                                for (let i = 0; i < 10; i++) {
                                    gameState.entities.push({
                                        type: 'entity',
                                        x: Math.random() * canvas.width,
                                        y: Math.random() * canvas.height,
                                        radius: 5 + Math.random() * 15,
                                        color: '#FFC107'
                                    });
                                }
                            }
                            
                            // Game loop
                            function gameLoop() {
                                if (!gameState.running) return;
                                
                                // Clear canvas
                                ctx.fillStyle = '#1a1a1a';
                                ctx.fillRect(0, 0, canvas.width, canvas.height);
                                
                                // Update and draw entities
                                gameState.entities.forEach(entity => {
                                    if (entity.type === 'player') {
                                        ctx.beginPath();
                                        ctx.arc(entity.x, entity.y, entity.radius, 0, Math.PI * 2);
                                        ctx.fillStyle = entity.color;
                                        ctx.fill();
                                    } else if (entity.type === 'obstacle') {
                                        ctx.fillStyle = entity.color;
                                        ctx.fillRect(entity.x, entity.y, entity.width, entity.height);
                                    } else {
                                        ctx.beginPath();
                                        ctx.arc(entity.x, entity.y, entity.radius, 0, Math.PI * 2);
                                        ctx.fillStyle = entity.color;
                                        ctx.fill();
                                    }
                                });
                                
                                // Draw score
                                ctx.fillStyle = '#ffffff';
                                ctx.font = '20px Arial';
                                ctx.fillText('Score: ' + gameState.score, 20, 30);
                                
                                // Game name and instructions
                                ctx.fillStyle = '#4CAF50';
                                ctx.font = '24px Arial';
                                ctx.fillText('${gameId.charAt(0).toUpperCase() + gameId.slice(1)}', canvas.width / 2 - 50, 30);
                                
                                ctx.fillStyle = '#cccccc';
                                ctx.font = '16px Arial';
                                ctx.fillText('Use arrow keys or WASD to play', canvas.width / 2 - 120, canvas.height - 20);
                                
                                // Update score
                                gameState.score++;
                                
                                // Request next frame
                                requestAnimationFrame(gameLoop);
                            }
                            
                            // Add event listeners for player control
                            document.addEventListener('keydown', event => {
                                const player = gameState.entities.find(e => e.type === 'player');
                                if (!player) return;
                                
                                const speed = 5;
                                
                                switch(event.key) {
                                    case 'ArrowLeft':
                                    case 'a':
                                        player.x -= speed;
                                        break;
                                    case 'ArrowRight':
                                    case 'd':
                                        player.x += speed;
                                        break;
                                    case 'ArrowUp':
                                    case 'w':
                                        player.y -= speed;
                                        break;
                                    case 'ArrowDown':
                                    case 's':
                                        player.y += speed;
                                        break;
                                }
                                
                                // Keep player in bounds
                                player.x = Math.max(player.radius, Math.min(canvas.width - player.radius, player.x));
                                player.y = Math.max(player.radius, Math.min(canvas.height - player.radius, player.y));
                            });
                            
                            // Start game loop
                            gameLoop();
                            
                            return gameState;
                        }
                        
                        // Initialize game
                        const gameInstance = initGame_${gameId}();
                    `
                };
                
                resolve(gameContent);
            }, 1500); // Simulate loading delay
        });
    }
    
    // Render game content in the provided container
    function renderGameContent(gameContent, container) {
        // Insert HTML
        container.innerHTML = gameContent.html;
        
        // Add script to initialize game
        const script = document.createElement('script');
        script.textContent = gameContent.initScript;
        container.appendChild(script);
    }

    // History Management
    function addToHistory(url, method) {
        const historyList = document.getElementById('history-list');
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        historyItem.innerHTML = `
            <span>[${method.toUpperCase()}] ${url}</span>
            <span>${new Date().toLocaleTimeString()}</span>
        `;
        historyList.insertBefore(historyItem, historyList.firstChild);

        // Limit history items
        if (historyList.children.length > 10) {
            historyList.removeChild(historyList.lastChild);
        }

        // Save to localStorage
        try {
            const history = JSON.parse(localStorage.getItem('proxyHistory') || '[]');
            history.unshift({ url, method, timestamp: new Date().toISOString() });
            if (history.length > 50) history.pop();
            localStorage.setItem('proxyHistory', JSON.stringify(history));
        } catch (e) {
            console.error('Error saving to history:', e);
        }
    }

    // Status Panel Updates
    function updateStatus() {
        document.getElementById('active-connections').textContent = 
            Math.floor(Math.random() * 50 + 10);
        document.getElementById('server-load').textContent = 
            Math.floor(Math.random() * 30 + 20) + '%';
        document.getElementById('response-time').textContent = 
            Math.floor(Math.random() * 100 + 50) + 'ms';
    }
    setInterval(updateStatus, 2000);

    // Load history from localStorage on page load
    try {
        const history = JSON.parse(localStorage.getItem('proxyHistory') || '[]');
        const historyList = document.getElementById('history-list');
        history.forEach(item => {
            const historyItem = document.createElement('div');
            historyItem.className = 'history-item';
            historyItem.innerHTML = `
                <span>[${item.method.toUpperCase()}] ${item.url}</span>
                <span>${new Date(item.timestamp).toLocaleTimeString()}</span>
            `;
            historyList.appendChild(historyItem);
        });
    } catch (e) {
        console.error('Error loading history:', e);
    }
</script>
</body>
</html>